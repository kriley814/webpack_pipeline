node {

    def registry = 'http://10.10.100.126:8081/repository/jeffnat/'
    def scanner = 'http://10.10.100.126:9000'
    def artifact = 'ng-home-0.0.1.tgz'
    def deployHost = '10.10.100.126'

     
    env.NODEJS_HOME = "${tool 'Node9.x'}"
    env.PATH="${env.NODEJS_HOME}/bin:${env.PATH}"
        
try {
   stage('Preparation') { 
      // Get some code from a GitHub repository
        echo "Prep"
        checkout scm
   }  
   
} catch(e) {
    currentBuild.result = "FAILURE"
    echo 'Preparation stage failed'

    // Since we're catching the exception in order to report on it,
    // we need to re-throw it, to ensure that the build is marked as failed
    throw e

} finally {
        echo "${currentBuild.result}"
        def currentResult = currentBuild.result ?: 'SUCCESS'
        echo "${currentResult}"
        if (currentResult == 'FAILURE') {
            echo 'This will run only if the run was marked as FAILED'
            emailext (
                subject: "FAILED: Job '${env.JOB_NAME} [${env.BUILD_NUMBER}]'",
                body: """<p>FAILED: Job '${env.JOB_NAME} [${env.BUILD_NUMBER}]':</p>
                <p>Check console output at "<a href="${env.BUILD_URL}">${env.JOB_NAME} [${env.BUILD_NUMBER}]</a>"</p>""",
                to: '$DEFAULT_RECIPIENTS'
            )
        }
        echo 'This will always run'
    }
   
       /*
       stage('Analysis') { 
            
                withSonarQubeEnv('My SonarQube Server') { 
                    //def sonarqubeScannerHome = tool name: 'sonar', type: 'hudson.plugins.sonar.SonarRunnerInstallation'
                    //sh '${sonarqubeScannerHome}/bin/sonar-scanner ' +
                    sh '/var/jenkins_home/tools/hudson.plugins.sonar.SonarRunnerInstallation/SonarQube/bin/sonar-scanner ' +
            '-Dsonar.host.url=' + "${scanner}" + ' '
            '-Dsonar.projectKey=ng-home-pipeline ' +
            '-Dsonar.language=ts ' +
            '-Dsonar.sources=src '
                }
            
         }
   
   
       stage('Package') { 
            
                catchError {
                    echo '************ZIP FILES HERE******************'   
                    sh 'rm -f .tmp/*.zip'
                    zip zipFile: '.tmp/jn.zip', dir: './'
                    // Install dependencies
                    sh 'pwd'
                    dir ('webpackjs'){
                        sh 'pwd'
                        sh('npm install')
                        sh('npm run build')
                        sh 'ls -l ./dist'    
                    }

                }
            
        }
    
       stage('Publish') {
          
              echo "Publish"
              // need to have a .npmrc file that includes the following
              //registry=http://10.0.1.173:8081/repository/jeffnat/
              //_auth="YWRtaW46YWRtaW4xMjM="
              //email=admin@example.org
              //
              sh 'pwd'
              sh 'npm publish --registry ' + "${registry}"
            
       }
   
       stage('Deploy'){
              echo "Deploy"
              build job: 'kims_deploy_pipeline', parameters: [string(name: 'registry', value: "${registry}"),string(name: 'artifact', value: "${artifact}"),string(name: 'deployHost', value: "${deployHost}")], propagate: true, wait: true
          
       }
       */
}
